using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using PRN231_PE_Trial_WebUI.UIModels;
using System.IdentityModel.Tokens.Jwt;
using System.Net.Http.Headers;
using System.Text;

namespace PRN231_PE_Trial_WebUI.Pages.CompanyProjectPages
{
    public class EditModel : PageModel
    {
        private readonly IHttpClientFactory _httpClientFactory;

        public EditModel(IHttpClientFactory httpClientFactory)
        {
            _httpClientFactory = httpClientFactory;
        }

        [BindProperty]
        public CompanyProjectModel CompanyProject { get; set; }
        [BindProperty]
        public int[] SelectedEmployeeIDs { get; set; }
        [BindProperty]
        public List<DateTime> SelectedEmployeesStartDates { get; set; }
        [BindProperty]
        public List<DateTime> SelectedEmployeesEndDates { get; set; }
        //public SelectList SelectableEmployees { get; set; } // Automatically generated by Razor
        public List<SelectListItem> SelectableEmployees { get; set; }

        public async Task OnGet(int id)
        {
            SelectedEmployeesStartDates = new List<DateTime>(); // Initialize the list property
            SelectedEmployeesEndDates = new List<DateTime>(); // Initialize the list property

            #region Get tokens from browser cookies
            string jwtToken = Request.Cookies["jwtToken"];
            string refreshToken = Request.Cookies["refreshToken"];

            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken token = new JwtSecurityToken();

            if (jwtToken.IsNullOrEmpty())
            {
                ModelState.AddModelError("Token_Error", "Cookie contain JWT Token was not found!");
                token = null;
            }
            else
            {
                token = tokenHandler.ReadJwtToken(jwtToken);
            }

            //JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            #endregion

            #region Validate JWT Token
            // Validate the cookie contain the JWT token
            if (token == null)
            {
                ModelState.AddModelError("Token_Error", "Browser Cookie containing JWT Token Expired!");
            }
            else
            {
                // Validate jwtToken ExpiredDate
                long expriedUnixDate = Convert.ToInt64(token.Claims.FirstOrDefault(c => c.Type == "exp")?.Value);
                DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(expriedUnixDate);
                DateTime tokenExpiredDate = dateTimeOffset.LocalDateTime;

                if (tokenExpiredDate < DateTime.Now)
                {
                    ModelState.AddModelError("Token_Error", "jwtToken Expired!");
                }

                // Validate jwtToken Role
                string? userRole = token.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
                if (userRole != null)
                {
                    if (!userRole.Equals("ProjectManager"))
                    {
                        ModelState.AddModelError("Token_Error", "You are not allowed to access this function!");
                    }
                }
                else
                {
                    ModelState.AddModelError("Token_Error", "There is no ClaimType.Role in this jwt token!");
                }
            }
            #endregion

            #region Call Odata API To Get SelectableEmployees
            // Only run if there's no problem with jwt Token
            if (ModelState.ErrorCount == 0)
            {
                // Get All Employees
                var apiUrl = $"https://localhost:7202/odata/Employee?$expand=Department&$filter=Status eq 'Active'";

                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(apiUrl),
                    Method = HttpMethod.Get
                };

                //add jwt to authorization header
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

                try
                {
                    //var response = await _httpClientFactory.CreateClient().GetAsync(apiUrl);
                    var client = _httpClientFactory.CreateClient();
                    var response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        var odataResponse = JsonConvert.DeserializeObject<OdataEmployeeModel>(responseContent);

                        if (odataResponse != null)
                        {
                            // Set selectable list (Automatically generated by Razor)
                            //SelectableEmployees = new SelectList(odataResponse.Value, nameof(EmployeeModel.EmployeeID), nameof(EmployeeModel.FullName), null, nameof(EmployeeModel.DepartmentID));
                            // Note: some how optGroup can only work by on the same Object level, can't go deep to DepartmentModel to take DepartmentName

                            // Set selectable list manually

                            #region Set SelectListGroup
                            List<SelectListGroup> selectListGroups = new List<SelectListGroup>();
                            foreach (var employee in odataResponse.Value)
                            {
                                var group = selectListGroups.FirstOrDefault(g => g.Name == employee.Department.DepartmentName);
                                if (group == null)
                                {
                                    group = new SelectListGroup() { Name = employee.Department.DepartmentName };
                                    selectListGroups.Add(group);
                                }
                            }
                            #endregion

                            #region Set SelectListItem
                            var list = new List<SelectListItem>();
                            foreach (var employee in odataResponse.Value)
                            {
                                var item = new SelectListItem()
                                {
                                    Value = employee.EmployeeID.ToString(),
                                    Text = employee.FullName,
                                    Group = selectListGroups.FirstOrDefault(g => g.Name == employee.Department.DepartmentName)
                                };
                                list.Add(item);
                            }
                            #endregion

                            SelectableEmployees = list;
                        }
                        else
                        {
                            ModelState.AddModelError("Odata_Error", "Failed JsonConvert");
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("Odata_Error", "Invalid response from the API");
                    }

                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("Odata_Error", ex.Message);
                }
            }
            #endregion

            #region Call Odata API To Get Current Selected Company Project
            // Only run if there's no problem with jwt Token
            if (ModelState.ErrorCount == 0)
            {
                // Only get CompanyProject
                var apiUrl = $"https://localhost:7202/odata/CompanyProject?$expand=participatingProjects($expand=employee($expand=department))&$filter=CompanyProjectID eq {id}";
                // Note: $count from OData count all the record INSIDE DB, not the records that had QUERIED up
                // Note 2: Exception with $filter query, only count number of records AFTER Filter

                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(apiUrl),
                    Method = HttpMethod.Get,
                };

                //add jwt to authorization header
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

                try
                {
                    //var response = await _httpClientFactory.CreateClient().GetAsync(apiUrl);
                    var client = _httpClientFactory.CreateClient();
                    var response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        var odataObject = JsonConvert.DeserializeObject<OdataCompanyProjectModel>(responseContent);

                        if (odataObject != null)
                        {
                            if (odataObject.Value.Count != 0)
                            {
                                CompanyProject = odataObject.Value[0];// Get the Filtered Value

                                List<int> participatingEmployeeIDs = new List<int>();

                                foreach (var pp in CompanyProject.ParticipatingProjects)
                                {
                                    participatingEmployeeIDs.Add((int)pp.EmployeeID);
                                    SelectedEmployeesStartDates.Add((DateTime)pp.StartDate);
                                    SelectedEmployeesEndDates.Add((DateTime)pp.EndDate);
                                }
                                SelectedEmployeeIDs = participatingEmployeeIDs.ToArray();

                            }
                            else
                            {
                                ModelState.AddModelError("Odata_Error", "Failed to get Company Project");
                            }

                        }
                        else
                        {
                            ModelState.AddModelError("Odata_Error", "Failed JsonConvert");
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("Odata_Error", "Invalid response from the API");
                    }

                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("Odata_Error", ex.Message);
                }
            }
            #endregion

        }

        public async Task<IActionResult> OnPostUpdate()
        {
            #region Get tokens from browser cookies
            string jwtToken = Request.Cookies["jwtToken"];
            string refreshToken = Request.Cookies["refreshToken"];

            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            JwtSecurityToken token = new JwtSecurityToken();

            if (jwtToken.IsNullOrEmpty())
            {
                ModelState.AddModelError("Token_Error", "Cookie contain JWT Token was not found!");
                token = null;
            }
            else
            {
                token = tokenHandler.ReadJwtToken(jwtToken);
            }

            //JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();
            #endregion

            #region Validate JWT Token
            // Validate the cookie contain the JWT token
            if (token == null)
            {
                ModelState.AddModelError("Token_Error", "Browser Cookie containing JWT Token Expired!");
            }
            else
            {
                // Validate jwtToken ExpiredDate
                long expriedUnixDate = Convert.ToInt64(token.Claims.FirstOrDefault(c => c.Type == "exp")?.Value);
                DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(expriedUnixDate);
                DateTime tokenExpiredDate = dateTimeOffset.LocalDateTime;

                if (tokenExpiredDate < DateTime.Now)
                {
                    ModelState.AddModelError("Token_Error", "jwtToken Expired!");
                }

                // Validate jwtToken Role
                string? userRole = token.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
                if (userRole != null)
                {
                    if (!userRole.Equals("ProjectManager"))
                    {
                        ModelState.AddModelError("Token_Error", "You are not allowed to access this function!");
                    }
                }
                else
                {
                    ModelState.AddModelError("Token_Error", "There is no ClaimType.Role in this jwt token!");
                }
            }
            #endregion

            #region Manual map Participate Employee to CompanyProject
            int counter = 0;
            foreach (var employee in SelectedEmployeeIDs)
            {
                var participatingProjects = new ParticipatingProjectModel();
                //// check if the SelectedEmployeeID was already in the DB.
                //// If so, add in CompanyProjectID so it will Update the current participatingProject not create a new one
                //if (CompanyProject.ParticipatingProjects.FirstOrDefault(pp => pp.EmployeeID.Equals(employee)) != null)
                //{
                //    participatingProjects.CompanyProjectID = CompanyProject.CompanyProjectID;
                //}
                participatingProjects.CompanyProjectID = CompanyProject.CompanyProjectID;
                participatingProjects.EmployeeID = employee;
                participatingProjects.StartDate = SelectedEmployeesStartDates[counter];
                participatingProjects.EndDate = SelectedEmployeesEndDates[counter];
                counter++;
                CompanyProject.ParticipatingProjects.Add(participatingProjects);
            }
            #endregion

            #region Call Odata API
            // Only run if there's no problem with jwt Token
            if (ModelState.ErrorCount == 0)
            {
                var apiUrl = $"https://localhost:7202/odata/CompanyProject/{CompanyProject.CompanyProjectID}";

                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(apiUrl),
                    Method = HttpMethod.Patch,
                    Content = new StringContent(JsonConvert.SerializeObject(CompanyProject), Encoding.UTF8, "application/json"),
                };

                //add jwt to authorization header
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

                try
                {
                    //var response = await _httpClientFactory.CreateClient().GetAsync(apiUrl);
                    var client = _httpClientFactory.CreateClient();
                    var response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        var apiResponse = JsonConvert.DeserializeObject<SimpleApiResonse>(responseContent);

                        if (apiResponse.Status)
                        {
                            // Success
                            return RedirectToPage("Management");
                        }
                        else
                        {
                            // Return API validator Error
                            foreach (var error in apiResponse.ErrorMessage)
                            {
                                ModelState.AddModelError("Odata_Error", error);
                            }
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("Odata_Error", "Invalid response from the API");
                    }

                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("Odata_Error", ex.Message);
                }
            }
            #endregion

            // Failed
            #region Call Odata API To Get SelectableEmployees
            if (ModelState.ErrorCount != 0)
            {
                // Get All Employees
                var apiUrl = $"https://localhost:7202/odata/Employee?$expand=Department&$filter=Status eq 'Active'";

                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(apiUrl),
                    Method = HttpMethod.Get
                };

                //add jwt to authorization header
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

                try
                {
                    //var response = await _httpClientFactory.CreateClient().GetAsync(apiUrl);
                    var client = _httpClientFactory.CreateClient();
                    var response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        var odataResponse = JsonConvert.DeserializeObject<OdataEmployeeModel>(responseContent);

                        if (odataResponse != null)
                        {
                            // Set selectable list (Automatically generated by Razor)
                            //SelectableEmployees = new SelectList(odataResponse.Value, nameof(EmployeeModel.EmployeeID), nameof(EmployeeModel.FullName), null, nameof(EmployeeModel.DepartmentID));
                            // Note: some how optGroup can only work by on the same Object level, can't go deep to DepartmentModel to take DepartmentName

                            // Set selectable list manually

                            #region Set SelectListGroup
                            List<SelectListGroup> selectListGroups = new List<SelectListGroup>();
                            foreach (var employee in odataResponse.Value)
                            {
                                var group = selectListGroups.FirstOrDefault(g => g.Name == employee.Department.DepartmentName);
                                if (group == null)
                                {
                                    group = new SelectListGroup() { Name = employee.Department.DepartmentName };
                                    selectListGroups.Add(group);
                                }
                            }
                            #endregion

                            #region Set SelectListItem
                            var list = new List<SelectListItem>();
                            foreach (var employee in odataResponse.Value)
                            {
                                var item = new SelectListItem()
                                {
                                    Value = employee.EmployeeID.ToString(),
                                    Text = employee.FullName,
                                    Group = selectListGroups.FirstOrDefault(g => g.Name == employee.Department.DepartmentName)
                                };
                                list.Add(item);
                            }
                            #endregion

                            SelectableEmployees = list;
                        }
                        else
                        {
                            ModelState.AddModelError("Odata_Error", "Failed JsonConvert");
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("Odata_Error", "Invalid response from the API");
                    }

                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("Odata_Error", ex.Message);
                }
            }
            #endregion
            SelectedEmployeesStartDates = new List<DateTime>(); // Re-Initialize the list property
            SelectedEmployeesEndDates = new List<DateTime>(); // Re-Initialize the list property

            #region Call Odata API To Get Current Selected Company Project
            // Only run if there's no problem with jwt Token
            if (ModelState.ErrorCount != 0)
            {
                // Only get CompanyProject
                var apiUrl = $"https://localhost:7202/odata/CompanyProject?$expand=participatingProjects($expand=employee($expand=department))&$filter=CompanyProjectID eq {CompanyProject.CompanyProjectID}";
                // Note: $count from OData count all the record INSIDE DB, not the records that had QUERIED up
                // Note 2: Exception with $filter query, only count number of records AFTER Filter

                var request = new HttpRequestMessage()
                {
                    RequestUri = new Uri(apiUrl),
                    Method = HttpMethod.Get,
                };

                //add jwt to authorization header
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

                try
                {
                    //var response = await _httpClientFactory.CreateClient().GetAsync(apiUrl);
                    var client = _httpClientFactory.CreateClient();
                    var response = await client.SendAsync(request);

                    if (response.IsSuccessStatusCode)
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        var odataObject = JsonConvert.DeserializeObject<OdataCompanyProjectModel>(responseContent);

                        if (odataObject != null)
                        {
                            if (odataObject.Value.Count != 0)
                            {
                                CompanyProject = odataObject.Value[0];// Get the Filtered Value

                                List<int> participatingEmployeeIDs = new List<int>();

                                foreach (var pp in CompanyProject.ParticipatingProjects)
                                {
                                    participatingEmployeeIDs.Add((int)pp.EmployeeID);
                                    SelectedEmployeesStartDates.Add((DateTime)pp.StartDate);
                                    SelectedEmployeesEndDates.Add((DateTime)pp.EndDate);
                                }
                                SelectedEmployeeIDs = participatingEmployeeIDs.ToArray();



                            }
                            else
                            {
                                ModelState.AddModelError("Odata_Error", "Failed to get Company Project");
                            }

                        }
                        else
                        {
                            ModelState.AddModelError("Odata_Error", "Failed JsonConvert");
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("Odata_Error", "Invalid response from the API");
                    }

                }
                catch (Exception ex)
                {
                    ModelState.AddModelError("Odata_Error", ex.Message);
                }
            }
            #endregion

            return Page();
        }

    }
}
